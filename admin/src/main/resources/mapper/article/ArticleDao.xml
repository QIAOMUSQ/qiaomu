<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">    
<mapper namespace="com.qiaomu.modules.article.dao.ArticleDao">

	<!-- 根据key，更新value -->
	<select id="query" parameterType="com.qiaomu.modules.article.model.ArticleSelectModel" resultType="com.qiaomu.modules.article.model.ArticleModel">
		select a.*,b.nick_name as nickName,b.real_name as realName from pluto_article as a JOIN sys_user as b
		<where>
			a.authorId=b.user_id
			<if test="category != null and category !=''">
				AND category = #{category}
			</if>
			<if test="title != null and title !=''">
				AND title = #{title}
			</if>
			<if test="authorId != null and authorId !=''">
				AND authorId = #{authorId}
			</if>
			<if test="articleId != null and articleId !=''">
				AND articleId = #{articleId}
			</if>
			<if test="communityId != null and communityId !=''">
				AND (isPrivate = "0" OR communityId = #{communityId})
			</if>
			<if test='queryType != null and queryType =="1"'>
				order by createdAt desc
			</if>
			<if test='queryType != null and queryType =="3"'>
				order by viewNum desc
			</if>

		</where>
	</select>


	<select id="queryArticleByCommentNum" parameterType="com.qiaomu.modules.article.model.ArticleSelectModel" resultType="com.qiaomu.modules.article.model.ArticleModel">
		SELECT * ,count(*) as number from (SELECT a.* ,b.createdAt as tt,c.nick_name as nickName,c.real_name as realName from (pluto_article as a
		inner join  pluto_article_comment  as b on a.articleId=b.articleId) left join sys_user as c  on a.authorId=c.user_id ) as t
		<where>
		<if test="category != null and category !=''">
			AND category = #{category}
		</if>
		<if test="communityId != null and communityId !=''">
			AND (isPrivate = "0" OR communityId = #{communityId})
		</if>
	</where>
		GROUP BY articleId order by number desc
    </select>

	<select id="queryArticleByCommentTime" parameterType="com.qiaomu.modules.article.model.ArticleSelectModel" resultType="com.qiaomu.modules.article.model.ArticleModel">
		SELECT * from (SELECT a.* ,b.createdAt as tt,c.nick_name as nickName,c.real_name as realName from (pluto_article as a inner join  pluto_article_comment
		as b on a.articleId=b.articleId) left join sys_user as c  on a.authorId=c.user_id order by b.createdAt desc limit 1000)
		as t
		<where>
			<if test="category != null and category !=''">
				AND category = #{category}
			</if>
			<if test="communityId != null and communityId !=''">
				AND (isPrivate = "0" OR communityId = #{communityId})
			</if>
		</where>
		GROUP BY articleId order by tt desc
	</select>

	<select id="queryPraise" parameterType="com.qiaomu.modules.article.entity.ArticlePraiseEntity" resultType="java.lang.String">
	select isPraise from pluto_article_praise WHERE userId = #{userId} and articleId=#{articleId}
	</select>
	<update id="updateArticlePraiseNum" parameterType="com.qiaomu.modules.article.entity.ArticleEntity">
		update pluto_article set praiseNum = #{praiseNum} where articleId = #{articleId}
	</update>
	<update id="updateArticleViewNum" parameterType="com.qiaomu.modules.article.entity.ArticleEntity">
		update pluto_article set viewNum = #{viewNum} where articleId = #{articleId}
	</update>
	<update id="updateArticle" parameterType="com.qiaomu.modules.article.entity.ArticleEntity">
		update pluto_article set content = #{content} ,title= #{title},category= #{category},imageUrls=#{imageUrls},updatedAt=#{updatedAt} where articleId = #{articleId}
	</update>

	<insert id="insertArticlePraise" parameterType="com.qiaomu.modules.article.entity.ArticlePraiseEntity">
		insert into pluto_article_praise (userId,isPraise,articleId) VALUES (#{userId},#{isPraise},#{articleId})
	</insert>
	<insert id="insertArticlePoint" parameterType="com.qiaomu.modules.article.entity.ArticlePoint">
		insert into article_point (userId,point,communityId) VALUES (#{userId},#{point},#{communityId})
	</insert>
	<update id="updateArticlePraise" parameterType="com.qiaomu.modules.article.entity.ArticlePraiseEntity">
		update pluto_article_praise set isPraise = #{isPraise} where userId = #{userId}
	</update>

	<insert id="insertArticle" parameterType="com.qiaomu.modules.article.entity.ArticleEntity">
		insert into pluto_article (articleId ,content,title,category,commentId,praiseNum,viewNum,authorId,isPrivate,communityId,imageUrls,headUrl,createdAt,updatedAt) VALUES
		 (#{articleId},#{content},#{title},#{category},#{commentId},#{praiseNum},#{viewNum},#{authorId},#{isPrivate},#{communityId},#{imageUrls},#{headUrl},#{createdAt},#{updatedAt})
	</insert>

	<insert id="insertArticleComment" parameterType="com.qiaomu.modules.article.entity.CommentEntity">
		insert into pluto_article_comment (articleId ,content,commentId,userId,createdAt,updatedAt) VALUES
		(#{articleId},#{content},#{commentId},#{userId},#{createdAt},#{updatedAt})
	</insert>
	<delete id="deleteArticleByArticleId" parameterType="com.qiaomu.modules.article.entity.CommentEntity">
		delete from pluto_article WHERE articleId = #{articleId}
	</delete>
	<delete id="deleteCommentById" parameterType="com.qiaomu.modules.article.entity.CommentEntity">
		delete from pluto_article_comment WHERE commentId = #{commentId}
	</delete>
	<delete id="deleteCommentByArticleId" parameterType="com.qiaomu.modules.article.entity.CommentEntity">
		delete from pluto_article_comment WHERE articleId = #{articleId}
	</delete>
	<select id="queryCommentByArticleId" parameterType="java.lang.String" resultType="com.qiaomu.modules.article.entity.CommentEntity">
		select * from pluto_article_comment WHERE articleId = #{articleId}
	</select>
	<select id="queryCommentByUserId" parameterType="java.lang.String" resultType="com.qiaomu.modules.article.entity.CommentEntity">
		select * from pluto_article_comment WHERE userId = #{userId}
	</select>
	<select id="queryArticlePoints"   parameterType="java.lang.String" resultType="com.qiaomu.modules.article.entity.ArticlePoint">
		select a.userId,b.real_name as realName,sum(a.point)  as point from article_point as a  JOIN sys_user as b where a.userId=b.user_id and a.communityId = #{communityId}GROUP by userId ORDER by point DESC limit 20
	</select>
	<select id="queryArticlePoint" parameterType="java.lang.String" resultType="com.qiaomu.modules.article.entity.ArticlePoint">
		select userId,sum(point) as point from article_point WHERE userId = #{userId} and communityId = #{communityId} GROUP by userId
	</select>
</mapper>